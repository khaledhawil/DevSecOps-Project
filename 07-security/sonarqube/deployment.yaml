apiVersion: v1
kind: Namespace
metadata:
  name: sonarqube
  labels:
    app: sonarqube
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sonarqube
  namespace: sonarqube
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sonarqube-config
  namespace: sonarqube
data:
  sonar.properties: |
    # SonarQube Configuration
    sonar.jdbc.username=sonarqube
    sonar.jdbc.url=jdbc:postgresql://sonarqube-postgresql:5432/sonarqube
    sonar.web.javaAdditionalOpts=-server
    sonar.web.host=0.0.0.0
    sonar.web.port=9000
    sonar.web.context=/
    sonar.ce.javaAdditionalOpts=-server
    sonar.log.level=INFO
    sonar.path.logs=/opt/sonarqube/logs
---
apiVersion: v1
kind: Secret
metadata:
  name: sonarqube-postgresql
  namespace: sonarqube
type: Opaque
stringData:
  postgresql-password: "sonarqube_password_change_me"
  postgresql-postgres-password: "postgres_password_change_me"
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sonarqube-postgresql
  namespace: sonarqube
  labels:
    app: postgresql
    component: sonarqube-postgresql
spec:
  serviceName: sonarqube-postgresql
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
      component: sonarqube-postgresql
  template:
    metadata:
      labels:
        app: postgresql
        component: sonarqube-postgresql
    spec:
      containers:
      - name: postgresql
        image: postgres:15.5
        imagePullPolicy: IfNotPresent
        env:
        - name: POSTGRES_USER
          value: sonarqube
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sonarqube-postgresql
              key: postgresql-password
        - name: POSTGRES_DB
          value: sonarqube
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - name: postgresql
          containerPort: 5432
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U sonarqube
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U sonarqube
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 20Gi
---
apiVersion: v1
kind: Service
metadata:
  name: sonarqube-postgresql
  namespace: sonarqube
  labels:
    app: postgresql
    component: sonarqube-postgresql
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: postgresql
    component: sonarqube-postgresql
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarqube
  namespace: sonarqube
  labels:
    app: sonarqube
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sonarqube
  template:
    metadata:
      labels:
        app: sonarqube
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9000"
        prometheus.io/path: "/api/monitoring/metrics"
    spec:
      serviceAccountName: sonarqube
      initContainers:
      - name: init-sysctl
        image: busybox:1.36
        command:
        - sysctl
        - -w
        - vm.max_map_count=524288
        - fs.file-max=131072
        securityContext:
          privileged: true
          runAsUser: 0
      - name: init-db
        image: busybox:1.36
        command:
        - sh
        - -c
        - |
          until nc -z sonarqube-postgresql 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
      containers:
      - name: sonarqube
        image: sonarqube:10.3.0-community
        imagePullPolicy: IfNotPresent
        env:
        - name: SONAR_JDBC_USERNAME
          value: sonarqube
        - name: SONAR_JDBC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sonarqube-postgresql
              key: postgresql-password
        - name: SONAR_JDBC_URL
          value: jdbc:postgresql://sonarqube-postgresql:5432/sonarqube
        ports:
        - name: http
          containerPort: 9000
        volumeMounts:
        - name: sonarqube-data
          mountPath: /opt/sonarqube/data
        - name: sonarqube-logs
          mountPath: /opt/sonarqube/logs
        - name: sonarqube-extensions
          mountPath: /opt/sonarqube/extensions
        resources:
          requests:
            cpu: 500m
            memory: 2Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /api/system/status
            port: 9000
          initialDelaySeconds: 60
          periodSeconds: 30
          failureThreshold: 6
        readinessProbe:
          httpGet:
            path: /api/system/status
            port: 9000
          initialDelaySeconds: 60
          periodSeconds: 30
          failureThreshold: 6
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          fsGroup: 1000
      volumes:
      - name: sonarqube-data
        persistentVolumeClaim:
          claimName: sonarqube-data
      - name: sonarqube-logs
        persistentVolumeClaim:
          claimName: sonarqube-logs
      - name: sonarqube-extensions
        persistentVolumeClaim:
          claimName: sonarqube-extensions
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonarqube-data
  namespace: sonarqube
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonarqube-logs
  namespace: sonarqube
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonarqube-extensions
  namespace: sonarqube
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: sonarqube
  namespace: sonarqube
  labels:
    app: sonarqube
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 9000
    targetPort: 9000
  selector:
    app: sonarqube
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sonarqube
  namespace: sonarqube
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internal
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-path: /api/system/status
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
    alb.ingress.kubernetes.io/certificate-arn: ${CERTIFICATE_ARN}
    kubernetes.io/ingress.allow-http: "false"
spec:
  rules:
  - host: sonarqube.devsecops.internal
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sonarqube
            port:
              number: 9000
  tls:
  - hosts:
    - sonarqube.devsecops.internal
