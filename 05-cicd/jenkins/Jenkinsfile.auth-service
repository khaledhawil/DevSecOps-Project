// ============================================================================
// Jenkins Pipeline - Auth Service (Node.js)
// ============================================================================

pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: agent
spec:
  containers:
  - name: node
    image: node:18-alpine
    command: ['cat']
    tty: true
  - name: docker
    image: docker:24-dind
    securityContext:
      privileged: true
    volumeMounts:
    - name: docker-sock
      mountPath: /var/run
  - name: trivy
    image: aquasec/trivy:latest
    command: ['cat']
    tty: true
  - name: kubectl
    image: bitnami/kubectl:latest
    command: ['cat']
    tty: true
  volumes:
  - name: docker-sock
    emptyDir: {}
"""
        }
    }
    
    environment {
        SERVICE_NAME = 'auth-service'
        DOCKERHUB_USERNAME = 'khaledhawil'
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        IMAGE_TAG = "${env.GIT_COMMIT.take(8)}"
        IMAGE_NAME = "${DOCKERHUB_USERNAME}/${SERVICE_NAME}"
        KUBE_NAMESPACE = "${params.ENVIRONMENT == 'prod' ? 'devsecops-prod' : params.ENVIRONMENT == 'staging' ? 'devsecops-staging' : 'devsecops-dev'}"
    }
    
    parameters {
        choice(name: 'ENVIRONMENT', choices: ['dev', 'staging', 'prod'], description: 'Target environment')
        booleanParam(name: 'DEPLOY', defaultValue: true, description: 'Deploy to Kubernetes')
        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip tests')
        booleanParam(name: 'PUSH_LATEST', defaultValue: false, description: 'Also tag as latest')
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build') {
            steps {
                container('node') {
                    dir("02-services/${SERVICE_NAME}") {
                        sh '''
                            echo "üì¶ Building Auth Service..."
                            npm install
                        '''
                    }
                }
            }
        }
        
        stage('Test') {
            when { expression { !params.SKIP_TESTS } }
            steps {
                container('node') {
                    dir("02-services/${SERVICE_NAME}") {
                        sh 'npm run test || true'
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                container('docker') {
                    dir("02-services/${SERVICE_NAME}") {
                        sh """
                            docker build -t ${IMAGE_NAME}:${IMAGE_TAG} -t ${IMAGE_NAME}:${params.ENVIRONMENT} .
                        """
                    }
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                container('trivy') {
                    sh "trivy image --severity HIGH,CRITICAL --exit-code 0 ${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }
        
        stage('Push to DockerHub') {
            steps {
                container('docker') {
                    sh """
                        echo \${DOCKERHUB_CREDENTIALS_PSW} | docker login -u \${DOCKERHUB_CREDENTIALS_USR} --password-stdin
                        docker push ${IMAGE_NAME}:${IMAGE_TAG}
                        docker push ${IMAGE_NAME}:${params.ENVIRONMENT}
                    """
                    script {
                        if (params.PUSH_LATEST) {
                            sh """
                                docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest
                                docker push ${IMAGE_NAME}:latest
                            """
                        }
                    }
                }
            }
        }
        
        stage('Deploy') {
            when { expression { params.DEPLOY } }
            steps {
                container('kubectl') {
                    sh """
                        kubectl set image deployment/${SERVICE_NAME} ${SERVICE_NAME}=${IMAGE_NAME}:${IMAGE_TAG} -n ${KUBE_NAMESPACE} || echo "Deployment not found"
                        kubectl rollout status deployment/${SERVICE_NAME} -n ${KUBE_NAMESPACE} --timeout=300s || true
                    """
                }
            }
        }
    }
    
    post {
        success { echo "‚úÖ Build succeeded!" }
        failure { echo "‚ùå Build failed!" }
    }
}
