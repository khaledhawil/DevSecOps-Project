name: User Service CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - '02-services/user-service/**'
      - '.github/workflows/user-service.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '02-services/user-service/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  SERVICE_NAME: user-service
  SERVICE_PATH: 02-services/user-service
  AWS_REGION: us-east-1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache-dependency-path: ${{ env.SERVICE_PATH }}/go.sum

      - name: Install dependencies
        working-directory: ${{ env.SERVICE_PATH }}
        run: go mod download

      - name: Run tests
        working-directory: ${{ env.SERVICE_PATH }}
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Run linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: ${{ env.SERVICE_PATH }}

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ${{ env.SERVICE_PATH }}/coverage.out
          flags: user-service

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner (filesystem)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: ${{ env.SERVICE_PATH }}
          severity: 'CRITICAL,HIGH'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run gosec security scanner
        uses: securego/gosec@master
        with:
          args: '-fmt sarif -out gosec-results.sarif ${{ env.SERVICE_PATH }}/...'

      - name: Upload gosec results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'gosec-results.sarif'

  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name != 'pull_request'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.SERVICE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.SERVICE_PATH }}
          file: ${{ env.SERVICE_PATH }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Run Trivy vulnerability scanner (image)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: ${{ steps.meta.outputs.tags }}
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign image with Cosign
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          echo "$COSIGN_PRIVATE_KEY" > cosign.key
          cosign sign --key cosign.key \
            ${{ steps.meta.outputs.tags }}
          rm cosign.key

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: development
      url: https://dev.devsecops.local
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update image tag in manifests
        working-directory: 04-kubernetes/overlays/dev
        run: |
          IMAGE_TAG="${{ needs.build-and-push.outputs.image-tag }}"
          kustomize edit set image ${{ env.SERVICE_NAME }}=${IMAGE_TAG}

      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add 04-kubernetes/overlays/dev/kustomization.yaml
          git commit -m "Update ${{ env.SERVICE_NAME }} image tag for dev"
          git push

      - name: Wait for ArgoCD sync
        run: |
          echo "Waiting for ArgoCD to sync..."
          sleep 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.devsecops.local
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update image tag in manifests
        working-directory: 04-kubernetes/overlays/staging
        run: |
          IMAGE_TAG="${{ needs.build-and-push.outputs.image-tag }}"
          kustomize edit set image ${{ env.SERVICE_NAME }}=${IMAGE_TAG}

      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add 04-kubernetes/overlays/staging/kustomization.yaml
          git commit -m "Update ${{ env.SERVICE_NAME }} image tag for staging"
          git push

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event.inputs.environment == 'prod'
    environment:
      name: production
      url: https://api.devsecops.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update image tag in manifests
        working-directory: 04-kubernetes/overlays/prod
        run: |
          IMAGE_TAG="${{ needs.build-and-push.outputs.image-tag }}"
          kustomize edit set image ${{ env.SERVICE_NAME }}=${IMAGE_TAG}

      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add 04-kubernetes/overlays/prod/kustomization.yaml
          git commit -m "Update ${{ env.SERVICE_NAME }} image tag for production"
          git push

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test, security-scan, build-and-push]
    if: always()
    steps:
      - name: Send notification
        run: |
          echo "Workflow completed with status: ${{ job.status }}"
          # Add Slack/Teams notification here if needed
